#!/bin/bash

err() {
  echo "$@" 2>/dev/null
  echo "[$(date +'%Y-%m-%dT%H:%M:%S%z')] basecamp::reachback ยง $@" 1>/dev/null
}

# -----------------------------------------------

check_port() {

local readonly port="$1"

python <<EOT >/dev/null 2>&1 &
import socket

def main():
  try:
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.bind(('127.0.0.1', ${port}))
    sock.listen(5)
    sock.close()
    sock = socket.socket(socket.AF_INET6, socket.SOCK_STREAM)
    sock.bind(('::1', ${port}))
    sock.listen(5)
    sock.close()
  except socket.error as e:
    raise SystemExit(e.errno)

if __name__ == '__main__':
  main()
EOT

return "$?"
}

choose_ports() {
  declare -a vacant_ports
  declare -a forbidden_ports
  declare -a busy_ports

  local count=0
  while [[ $count -lt 50 ]]; do
    local port="$(( $RANDOM % 9999 + 50000 ))"
    if [[ ! "${vacant_ports[@]}" =~ "${port}" ]]; then
      let count+=1
      check_port "${port}"
      local rc="$?"
      if [[ "${rc}" -eq 0 ]]; then
        vacant_ports+=("${port}")
      elif [[ "${rc}" -eq 13 ]]; then
        forbidden_ports+=("${port}")
      elif [[ "${rc}" -eq 48 ]]; then
        busy_ports+=("${port}")
      else
        err "Internal Error"
        exit 1
      fi
    fi
  done

  if [[ "${#vacant_ports[@]}" -gt 0 ]]; then
    echo -n "${vacant_ports[@]}"
    return
  elif [[ "${#forbidden_ports[@]}" -gt 0 ]]; then
    err "Unable to listen on local socket: Permission denied"
    exit 13
  elif [[ "${#busy_ports[@]}" -gt 0 ]]; then
    err "Unable to listen on local socket: Port already in use"
    exit 48
  else
    err "Internal Error"
    exit 1
  fi
}

purge_carrier_remnants() {
  ps aux | grep -v grep | grep "M24GO57l6" >/dev/null 2>&1
  local rc="$?"
  if [[ ${rc} -ne 0 ]]; then
    echo purge this session ...
  fi
}

demolish_carrier() {
  local readonly handle="$1"
  local readonly target="$2"
  local readonly muxdir="${handle%/*}"
  ssh -O exit -S ${handle} ${target} >/dev/null 2>&1
  local rc="$?"
  rm -rf "${muxdir}"
  return "${rc}"
}

establish_carrier() {
  local readonly target="$1"
  mkdir -p ~/.ssh/basecamp
  local readonly handle="$(mktemp -d ~/.ssh/basecamp/mux.XXXXXXXXX)/control"
  ssh -f -N -T -n \
    -o ConnectTimeout=7 \
    -o ControlMaster=yes \
    -o ControlPersist=yes \
    -o HostKeyAlgorithms=ssh-ed25519,ssh-rsa \
    -o ServerAliveInterval=55 \
    -S "${handle}" ${target} >/dev/null 2>&1
  local rc="$?"
  if [[ "${rc}" -ne 0 ]]; then
    err "Unable to engage target host: ${target#*@}"
    exit "${rc}"
  fi
  echo -n "${handle}"
}

dismantle_httpd() {
  pkill python
}

launch_httpd() {
  local port="$1"
  local rootdir="$2"
  if [[ -z ${rootdir} ]]; then
    rootdir="/var/tmp/basecamp"
  fi
  mkdir -p ${rootdir}
  pushd ${rootdir} >/dev/null
  python -m SimpleHTTPServer "${port}" &
  popd >/dev/null
  echo; echo "http://127.0.0.1:${port}"; echo
}

main() {
  local readonly target="$1"
  local readonly ports="$(choose_ports)"
  local readonly handle="$(establish_carrier ${target})"

  local chosen_port=0
  for port in ${ports[@]}; do
    ssh -O forward -R ${port}:localhost:${port} -S ${handle} ${target}
    if [[ "$?" -eq 0 ]]; then
      chosen_port="${port}"
      break
    fi
  done
  if [[ "${chosen_port}" -eq 0 ]]; then
    err "Could not open socket on remote host"
  fi

  launch_httpd ${chosen_port} ${handle}
  ssh -S ${handle} ${target}
  dismantle_httpd ${chosen_port} ${handle}
  demolish_carrier ${handle} ${target}

}

# -----------------------------------------------

main "$@"
